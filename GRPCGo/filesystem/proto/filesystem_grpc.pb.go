// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (FileSystem_WriteClient, error)
}

type fileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemClient(cc grpc.ClientConnInterface) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) Write(ctx context.Context, opts ...grpc.CallOption) (FileSystem_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSystem_ServiceDesc.Streams[0], "/proto.FileSystem/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemWriteClient{stream}
	return x, nil
}

type FileSystem_WriteClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileSystemWriteClient struct {
	grpc.ClientStream
}

func (x *fileSystemWriteClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSystemWriteClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSystemServer is the server API for FileSystem service.
// All implementations must embed UnimplementedFileSystemServer
// for forward compatibility
type FileSystemServer interface {
	Write(FileSystem_WriteServer) error
	mustEmbedUnimplementedFileSystemServer()
}

// UnimplementedFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServer struct {
}

func (UnimplementedFileSystemServer) Write(FileSystem_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFileSystemServer) mustEmbedUnimplementedFileSystemServer() {}

// UnsafeFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServer will
// result in compilation errors.
type UnsafeFileSystemServer interface {
	mustEmbedUnimplementedFileSystemServer()
}

func RegisterFileSystemServer(s grpc.ServiceRegistrar, srv FileSystemServer) {
	s.RegisterService(&FileSystem_ServiceDesc, srv)
}

func _FileSystem_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServer).Write(&fileSystemWriteServer{stream})
}

type FileSystem_WriteServer interface {
	SendAndClose(*Response) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileSystemWriteServer struct {
	grpc.ServerStream
}

func (x *fileSystemWriteServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSystemWriteServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSystem_ServiceDesc is the grpc.ServiceDesc for FileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _FileSystem_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/filesystem.proto",
}
