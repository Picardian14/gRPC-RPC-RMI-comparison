// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package anomalydetector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnomalyDetectorClient is the client API for AnomalyDetector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnomalyDetectorClient interface {
	DetectAnomaly(ctx context.Context, opts ...grpc.CallOption) (AnomalyDetector_DetectAnomalyClient, error)
}

type anomalyDetectorClient struct {
	cc grpc.ClientConnInterface
}

func NewAnomalyDetectorClient(cc grpc.ClientConnInterface) AnomalyDetectorClient {
	return &anomalyDetectorClient{cc}
}

func (c *anomalyDetectorClient) DetectAnomaly(ctx context.Context, opts ...grpc.CallOption) (AnomalyDetector_DetectAnomalyClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnomalyDetector_ServiceDesc.Streams[0], "/protos.AnomalyDetector/DetectAnomaly", opts...)
	if err != nil {
		return nil, err
	}
	x := &anomalyDetectorDetectAnomalyClient{stream}
	return x, nil
}

type AnomalyDetector_DetectAnomalyClient interface {
	Send(*SingleAnomalyRequest) error
	CloseAndRecv() (*AnomalyResponse, error)
	grpc.ClientStream
}

type anomalyDetectorDetectAnomalyClient struct {
	grpc.ClientStream
}

func (x *anomalyDetectorDetectAnomalyClient) Send(m *SingleAnomalyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *anomalyDetectorDetectAnomalyClient) CloseAndRecv() (*AnomalyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AnomalyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnomalyDetectorServer is the server API for AnomalyDetector service.
// All implementations must embed UnimplementedAnomalyDetectorServer
// for forward compatibility
type AnomalyDetectorServer interface {
	DetectAnomaly(AnomalyDetector_DetectAnomalyServer) error
	mustEmbedUnimplementedAnomalyDetectorServer()
}

// UnimplementedAnomalyDetectorServer must be embedded to have forward compatible implementations.
type UnimplementedAnomalyDetectorServer struct {
}

func (UnimplementedAnomalyDetectorServer) DetectAnomaly(AnomalyDetector_DetectAnomalyServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectAnomaly not implemented")
}
func (UnimplementedAnomalyDetectorServer) mustEmbedUnimplementedAnomalyDetectorServer() {}

// UnsafeAnomalyDetectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnomalyDetectorServer will
// result in compilation errors.
type UnsafeAnomalyDetectorServer interface {
	mustEmbedUnimplementedAnomalyDetectorServer()
}

func RegisterAnomalyDetectorServer(s grpc.ServiceRegistrar, srv AnomalyDetectorServer) {
	s.RegisterService(&AnomalyDetector_ServiceDesc, srv)
}

func _AnomalyDetector_DetectAnomaly_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnomalyDetectorServer).DetectAnomaly(&anomalyDetectorDetectAnomalyServer{stream})
}

type AnomalyDetector_DetectAnomalyServer interface {
	SendAndClose(*AnomalyResponse) error
	Recv() (*SingleAnomalyRequest, error)
	grpc.ServerStream
}

type anomalyDetectorDetectAnomalyServer struct {
	grpc.ServerStream
}

func (x *anomalyDetectorDetectAnomalyServer) SendAndClose(m *AnomalyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *anomalyDetectorDetectAnomalyServer) Recv() (*SingleAnomalyRequest, error) {
	m := new(SingleAnomalyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnomalyDetector_ServiceDesc is the grpc.ServiceDesc for AnomalyDetector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnomalyDetector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AnomalyDetector",
	HandlerType: (*AnomalyDetectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectAnomaly",
			Handler:       _AnomalyDetector_DetectAnomaly_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/methods.proto",
}
