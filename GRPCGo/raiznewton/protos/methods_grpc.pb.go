// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raiznewton

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewtonCalculatorClient is the client API for NewtonCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewtonCalculatorClient interface {
	RootMethod(ctx context.Context, in *IntRootRequest, opts ...grpc.CallOption) (NewtonCalculator_RootMethodClient, error)
}

type newtonCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewNewtonCalculatorClient(cc grpc.ClientConnInterface) NewtonCalculatorClient {
	return &newtonCalculatorClient{cc}
}

func (c *newtonCalculatorClient) RootMethod(ctx context.Context, in *IntRootRequest, opts ...grpc.CallOption) (NewtonCalculator_RootMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &NewtonCalculator_ServiceDesc.Streams[0], "/protos.NewtonCalculator/RootMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &newtonCalculatorRootMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewtonCalculator_RootMethodClient interface {
	Recv() (*RootResponse, error)
	grpc.ClientStream
}

type newtonCalculatorRootMethodClient struct {
	grpc.ClientStream
}

func (x *newtonCalculatorRootMethodClient) Recv() (*RootResponse, error) {
	m := new(RootResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewtonCalculatorServer is the server API for NewtonCalculator service.
// All implementations must embed UnimplementedNewtonCalculatorServer
// for forward compatibility
type NewtonCalculatorServer interface {
	RootMethod(*IntRootRequest, NewtonCalculator_RootMethodServer) error
	mustEmbedUnimplementedNewtonCalculatorServer()
}

// UnimplementedNewtonCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedNewtonCalculatorServer struct {
}

func (UnimplementedNewtonCalculatorServer) RootMethod(*IntRootRequest, NewtonCalculator_RootMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method RootMethod not implemented")
}
func (UnimplementedNewtonCalculatorServer) mustEmbedUnimplementedNewtonCalculatorServer() {}

// UnsafeNewtonCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewtonCalculatorServer will
// result in compilation errors.
type UnsafeNewtonCalculatorServer interface {
	mustEmbedUnimplementedNewtonCalculatorServer()
}

func RegisterNewtonCalculatorServer(s grpc.ServiceRegistrar, srv NewtonCalculatorServer) {
	s.RegisterService(&NewtonCalculator_ServiceDesc, srv)
}

func _NewtonCalculator_RootMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntRootRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewtonCalculatorServer).RootMethod(m, &newtonCalculatorRootMethodServer{stream})
}

type NewtonCalculator_RootMethodServer interface {
	Send(*RootResponse) error
	grpc.ServerStream
}

type newtonCalculatorRootMethodServer struct {
	grpc.ServerStream
}

func (x *newtonCalculatorRootMethodServer) Send(m *RootResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NewtonCalculator_ServiceDesc is the grpc.ServiceDesc for NewtonCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewtonCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.NewtonCalculator",
	HandlerType: (*NewtonCalculatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RootMethod",
			Handler:       _NewtonCalculator_RootMethod_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/methods.proto",
}
